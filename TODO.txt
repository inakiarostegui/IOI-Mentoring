POINTERS AND MEMORY LAYOUT
layout of an object in memory
HINT: there are two ways of drawing memory, with the 0 on the top or on the bottom.
Little endian (the Intel model) has currently won and pretty much all consumer silicon on the planet runs in that mode
get used to draw memory with a 0 on the bottom.
how does an int32 look in memory when drawn that way?
how does a struct look in memory when drawn that way?
where is the first field of a struct?

ALIGNMENT
alignment of fields, alignment of types, padding.
behavior when in arrays.
use & to validate your assumptions on padding and offsets of fields in structs

SIZEOF operator
how does it behave on a pointer?
how on a string literal?
what about an array? (e.g. int a[3]; sizeof(a)? )
use sizeof to validate your assumptions on the size of objects
now derive a class from a base class and see what sizeof gives you.
what if the base class has virtual functions?
what if you derive from multiple base classes?
this ties into the vftbl I mentioned last time.

POINTER ARITHMETIC

MOVE SEMANTICS
when studying move semantics you really want to go deeper on:
behavior of rvalue references in templates (what happens if you pass a & to a T&& argument?)
std::forward and how to use it in templates
std::move, why is it needed on something that is already being passed as an rvalue?
move constructors, move assignment, and similar... try implement and debug them all on the Vector<T>

PASS BY VAL/REF
how does the compiler actually passes arguments? registers? stack? how is a large struct passed or returned?	
Open the REGISTERS and MEMORY views in Visual Studio and single step through a function call. Remember the RSP register points to the stack.

CONSTNESS AND IMMUTABILITY
Is there immutability support in C++?
real meaning of const (hint: "readonly" would have been a better name)
does const correctness affect compiler output? (relates to the point above)
transitive / non transitive behavior of const (e.g. what happens to a pointer in a const struct? what about the type pointed?)
mutable, what it does? for what it can be used? shall it ever be used? mutable lambdas

MEMORY MANAGEMENT
//assume byte is a typedef for unsigned char, or uint8_t, or std::byte
derive from this class and implement an allocator:

class IAllocator
{
public:
void Init(byte* memory_buffer, int memory_buffer_length_in_bytes) = 0; //another exercise, study std::span and replace this API to use spans instead of pointers+size

//should return nullptr if it can't/won't allocate
void* Allocate(int size) = 0;

//should do nothing if passed nullptr, undefined behavior (e.g. crash) if passed a pointer that wasn't previously allocated by the same allocator
void Free(void* ptr) = 0;
};

start from a simple "linear allocator": every time you're asked for a bit of memory, take it from the original array and give it back. once you ran out of memory simply return nullptr.
on deletion, you can do nothing. 
additional exercise: how to make that allocator automatically reset (i.e. ready to be used again) if all pending allocations have been freed?
once you feel a rockstar on memory allocation, go and watch this talk from Alexandrescu on the topic: https://www.youtube.com/watch?v=LIb3L4vKZ7U

OBJECT CREATION/DESTRUCTION 	
study placement new, and how to construct and destruct objects into pre-existing memory locations
Once you're done with that you can now reimplement the Vector<T> from our first chat without using new and delete, but using your own allocator.
based on what you know about move semantics, object construction, and perfect forwarding, you should be able to implement even the emplace_back(...) API from std::vector. give it a try.
This takes time, it's not a few hour exercise to properly do a std::vector replacement. take your time.

--------------------------------
[ALLOCATORS MISSING ALIGNMENT]
[ALLOCATORS MISSING HEADERS]
[VOLATILE]
[STD::ALLOCATOR]
[SCOPE_EXIT]
[FREE LIST ALLOCATOR]
[STD::SPAN]
[VECTOR CLASS UPGRADE]
[POINTER ALIASING]
[IMPLICIT CONVERSION]


POINTER ALIASING
this is quite theoretical but with recent moves towards DOD is coming back into relevance
restrict pointers (keep in mind this is not in C++ for some historical reason, yet supported unofficially by all compiler)
I'm tossing it here as a filler in case you're completely idle or bored, but you can happily put it on the backburner, as you won't need it any time soon.

IMPLICIT CONVERSION
when does the compiler do implicit conversion between?
how does the promotion work?
learn to use the "explicit" keyword on types
learn how to write cast operators on objects
